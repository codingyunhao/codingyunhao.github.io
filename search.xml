<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>C++模拟进程调度---多线程加入信号量控制临界区</title>
      <link href="/2018/04/29/C-%E6%A8%A1%E6%8B%9F%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8A%A0%E5%85%A5%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%8E%A7%E5%88%B6%E4%B8%B4%E7%95%8C%E5%8C%BA/"/>
      <url>/2018/04/29/C-%E6%A8%A1%E6%8B%9F%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8A%A0%E5%85%A5%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%8E%A7%E5%88%B6%E4%B8%B4%E7%95%8C%E5%8C%BA/</url>
      <content type="html"><![CDATA[<p><strong>分为三级反馈队列</strong><br>每次只从第一级队列里取出进程。<br>每执行三次一级队列的进程发生一次队列调整。</p><p><strong>三次执行</strong>：前两次遵从最短优先调度，最后一次随机取进程，<br>为的是让调整上来的进程可以有机会执行</p><p><strong>调整</strong>：从二级队列和三级队列分别随机取两个和一个进程<br>放入一级队列里面参与竞争。</p><p><strong>直到一级队列空则所有的进程执行完毕</strong></p><p><strong>加了一个线程专门产生进程</strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* title :C++模拟进程调度---多线程加入信号量控制临界区</span><br><span class="line">* author : liyunhao</span><br><span class="line">* date:2018.04.24</span><br><span class="line">* time : 21:10</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">调度的思想，分为三级反馈队列。</span><br><span class="line">每次只从第一级队列里取出进程。</span><br><span class="line"></span><br><span class="line">每执行三次一级队列的进程发生一次队列调整。</span><br><span class="line"></span><br><span class="line">三次执行：前两次遵从最短优先调度，最后一次随机取进程，</span><br><span class="line">为的是让调整上来的进程可以有机会执行</span><br><span class="line"></span><br><span class="line">调整：从二级队列和三级队列分别随机取两个和一个进程</span><br><span class="line">放入一级队列里面参与竞争。</span><br><span class="line"></span><br><span class="line">直到一级队列空则所有的进程执行完毕</span><br><span class="line"></span><br><span class="line">加了一个线程专门产生进程</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;list&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int mutex = 0;</span><br><span class="line">class tool&#123;//工具类</span><br><span class="line">public:</span><br><span class="line">    int timeInterval;</span><br><span class="line">    tool()&#123;</span><br><span class="line">        srand((unsigned)time( NULL ));//设置随机数</span><br><span class="line">        timeInterval = 10;//进程执行的单位间隔</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int getRandom(int a,int b)&#123;//返回指定范围的随机数</span><br><span class="line">        int range = b - a;</span><br><span class="line">        if(range==0)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return a + rand()%range;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class process&#123;//进程类</span><br><span class="line">public:</span><br><span class="line">    int pid;    //进程编号</span><br><span class="line">    int length;</span><br><span class="line">    int level;</span><br><span class="line">    process(int pid,int lengthOfProcess )&#123;</span><br><span class="line">        length = lengthOfProcess;</span><br><span class="line">        if(length &lt;= 0)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;进程创建失败！&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;else if(length &lt;= 10)&#123;</span><br><span class="line">            level = 1;</span><br><span class="line">            this-&gt;pid = pid;</span><br><span class="line">            cout&lt;&lt;&quot;进程&quot;&lt;&lt;pid&lt;&lt;&quot;创建,长度&quot;&lt;&lt;length &lt;&lt;endl;</span><br><span class="line">        &#125;else if(length &lt;= 20)&#123;</span><br><span class="line">            level = 2;</span><br><span class="line">            this-&gt;pid = pid;</span><br><span class="line">            cout&lt;&lt;&quot;进程&quot;&lt;&lt;pid&lt;&lt;&quot;创建,长度&quot;&lt;&lt;length &lt;&lt;endl;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            level = 3;</span><br><span class="line">            this-&gt;pid = pid;</span><br><span class="line">            cout&lt;&lt;&quot;进程&quot;&lt;&lt;pid&lt;&lt;&quot;创建,长度&quot;&lt;&lt;length &lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bool ajustLevel()&#123;//调整进程的优先级</span><br><span class="line">        if(length &lt;= 0)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;进程运行完毕！&quot;&lt;&lt;endl;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;else if(length &lt;= 10)&#123;</span><br><span class="line">            level = 1;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else if(length &lt;= 20)&#123;</span><br><span class="line">            level = 2;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            level = 3;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bool doTheProcess(int timeLength)&#123;</span><br><span class="line">        if(length &lt;=0 )&#123;</span><br><span class="line">            cout&lt;&lt;&quot;进程已经运行完毕！&quot;&lt;&lt;endl;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            length -= timeLength;</span><br><span class="line">            ajustLevel();</span><br><span class="line">            if(length &lt; 0)&#123;</span><br><span class="line">                length = 0;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    bool finishThePro()&#123;</span><br><span class="line">        cout&lt;&lt;&quot;进程&quot;&lt;&lt;pid&lt;&lt;&quot;执行完毕&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class processQueue&#123;</span><br><span class="line">public:</span><br><span class="line">    int level;  //队列的优先级</span><br><span class="line">    list&lt;process* &gt; List[3];//三个不同优先级的队列</span><br><span class="line">    processQueue()&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool processIncoming(process*pro)&#123;</span><br><span class="line">        int level = pro-&gt;level;</span><br><span class="line">        int pid = pro-&gt;pid;</span><br><span class="line">        if(level ==1)&#123;</span><br><span class="line">            List[0].push_back(pro);</span><br><span class="line">            cout&lt;&lt;&quot;进程&quot;&lt;&lt;pid&lt;&lt;&quot;加入队列&quot;&lt;&lt;level&lt;&lt;endl;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else if(level ==2)&#123;</span><br><span class="line">            List[1].push_back(pro);</span><br><span class="line">            cout&lt;&lt;&quot;进程&quot;&lt;&lt;pid&lt;&lt;&quot;加入队列&quot;&lt;&lt;level&lt;&lt;endl;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else if(level ==3)&#123;</span><br><span class="line">            List[2].push_back(pro);</span><br><span class="line">            cout&lt;&lt;&quot;进程&quot;&lt;&lt;pid&lt;&lt;&quot;加入队列&quot;&lt;&lt;level&lt;&lt;endl;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            cout&lt;&lt;&quot;未知的优先级！&quot;&lt;&lt;endl;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //从指定队列里面找一个进程，并从原来的队列删除该进程</span><br><span class="line">    process* findProFromList(int listNum)&#123;</span><br><span class="line">        listNum--;</span><br><span class="line">        list&lt;process*&gt;::iterator itor;</span><br><span class="line">        list&lt;process*&gt;::iterator delNode;</span><br><span class="line">        int currentMin = 9999;</span><br><span class="line">        process* shortestPro;</span><br><span class="line">        if(List[listNum].size() == 0)&#123;</span><br><span class="line">            //cout&lt;&lt;&quot;队列&quot;&lt;&lt;listNum+1&lt;&lt;&quot;的进程已经执行完毕,获取失败&quot;&lt;&lt;endl;</span><br><span class="line">            return NULL;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //cout&lt;&lt;&quot;元素个数&quot;&lt;&lt;List1.size()&lt;&lt;endl;// 返回list中的元素个数</span><br><span class="line">            for(itor = List[listNum].begin();itor!=List[listNum].end();itor ++)&#123;</span><br><span class="line">                if((*itor)-&gt;length &lt; currentMin)&#123;</span><br><span class="line">                    currentMin = (*itor)-&gt;length;</span><br><span class="line">                    shortestPro = (*itor);</span><br><span class="line">                    delNode = itor;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            List[listNum].erase(delNode);//从进程队列中删除该进程</span><br><span class="line">            return shortestPro;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    process* findProFromListByRandom(int listNum)&#123;</span><br><span class="line">        listNum--;</span><br><span class="line">        list&lt;process*&gt;::iterator itor;</span><br><span class="line">        int currentMin = 9999;</span><br><span class="line">        process* shortestPro;</span><br><span class="line">        tool atool;</span><br><span class="line"></span><br><span class="line">        if(List[listNum].size() == 0)&#123;</span><br><span class="line">            //cout&lt;&lt;&quot;队列&quot;&lt;&lt;listNum+1&lt;&lt;&quot;的进程已经执行完毕,获取失败&quot;&lt;&lt;endl;</span><br><span class="line">            return NULL;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            itor = List[listNum].begin();</span><br><span class="line">            int queLen = List[listNum].size();</span><br><span class="line">            //cout&lt;&lt;&quot;queLen :&quot;&lt;&lt;queLen&lt;&lt;endl;</span><br><span class="line">            int randomNum = atool.getRandom(0,queLen-1);</span><br><span class="line">            //cout&lt;&lt;&quot;randomNum :&quot;&lt;&lt;randomNum&lt;&lt;endl;</span><br><span class="line">            //cout&lt;&lt;&quot;随机选取进程&quot;&lt;&lt;randomNum&lt;&lt;endl;</span><br><span class="line">            advance(itor,randomNum);</span><br><span class="line">            shortestPro = (*itor);</span><br><span class="line">            List[listNum].erase(itor);//从进程队列中删除该进程</span><br><span class="line">            //printQue(1);</span><br><span class="line">            return shortestPro;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    process* selectFromList1AndDoIt()&#123;</span><br><span class="line"></span><br><span class="line">        process* shortestPro;</span><br><span class="line">        shortestPro = findProFromList(1);</span><br><span class="line">        if(shortestPro!= NULL)&#123;</span><br><span class="line">            shortestPro-&gt;finishThePro();</span><br><span class="line">            //ajustLevelQueues();</span><br><span class="line">            return shortestPro;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return NULL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    process* selectList1ByRondomAndDoIt()&#123;</span><br><span class="line"></span><br><span class="line">        process* RondomPro;</span><br><span class="line">        RondomPro = findProFromListByRandom(1);</span><br><span class="line">        if(RondomPro!= NULL)&#123;</span><br><span class="line">            RondomPro-&gt;finishThePro();</span><br><span class="line">            //ajustLevelQueues();</span><br><span class="line">            return RondomPro;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return NULL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    bool ajustLevelQueues()&#123;</span><br><span class="line">        cout&lt;&lt;&quot;调整&quot;&lt;&lt;endl;</span><br><span class="line">        Sleep(500);</span><br><span class="line">        process* p[3];</span><br><span class="line">        p[0] = findProFromListByRandom(2);//从第二级队列随机获取进程</span><br><span class="line">        p[1] = findProFromListByRandom(2);//从第二级队列随机获取进程</span><br><span class="line">        p[2] = findProFromListByRandom(3);//从第三级队列随机获取进程</span><br><span class="line">        //process* p3 = findProFromList(3);//从第三极队列中获取最短时间进程</span><br><span class="line">        if( (p[0]==NULL) &amp;&amp;(p[1]==NULL) &amp;&amp; (p[2]== NULL))&#123;</span><br><span class="line"></span><br><span class="line">            //cout&lt;&lt;&quot;2,3队列已经空了，调整失败&quot;&lt;&lt;endl;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;else if((p[0]==NULL)  &amp;&amp; (p[2]!= NULL))&#123;</span><br><span class="line">            p[0] = findProFromListByRandom(3);//从第二级队列获取最短时间进程</span><br><span class="line">            p[1] = findProFromListByRandom(3);//从第三级队列获取最短时间进程</span><br><span class="line">        &#125;else if((p[0]!=NULL) &amp;&amp;(p[1]==NULL) &amp;&amp; (p[2]!= NULL))&#123;</span><br><span class="line">            p[1] = findProFromListByRandom(3);//从第二级队列获取最短时间进程</span><br><span class="line">        &#125;else if((p[0]!=NULL) &amp;&amp;(p[1]!=NULL) &amp;&amp; (p[2]== NULL))&#123;</span><br><span class="line">            p[2] = findProFromListByRandom(2);//从第二级队列获取最短时间进程</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if(p[0])&#123;</span><br><span class="line">            p[0]-&gt;level = 1;</span><br><span class="line">            cout&lt;&lt;&quot;调整&quot;&lt;&lt;p[0]-&gt;pid&lt;&lt;endl;</span><br><span class="line">            List[0].push_back(p[0]);//放入第一级队列</span><br><span class="line">        &#125;</span><br><span class="line">        if(p[1])&#123;</span><br><span class="line">            p[1]-&gt;level = 1;</span><br><span class="line">            cout&lt;&lt;&quot;调整&quot;&lt;&lt;p[1]-&gt;pid&lt;&lt;endl;</span><br><span class="line">            List[0].push_back(p[1]);//放入第一级队列</span><br><span class="line">        &#125;</span><br><span class="line">        if(p[2])&#123;</span><br><span class="line">            p[2]-&gt;level = 1;</span><br><span class="line">            cout&lt;&lt;&quot;调整&quot;&lt;&lt;p[2]-&gt;pid&lt;&lt;endl;</span><br><span class="line">            List[0].push_back(p[2]);//放入第一级队列</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    void printQue(int listNum)&#123;</span><br><span class="line">        listNum--;</span><br><span class="line">        list&lt;process*&gt;::iterator itor;</span><br><span class="line">        for(itor = List[listNum].begin();itor!=List[listNum].end();itor ++)&#123;</span><br><span class="line"></span><br><span class="line">                cout&lt;&lt;(*itor)-&gt;pid&lt;&lt;&quot; &quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class GanttChart&#123;//输出甘特图的类</span><br><span class="line">public:</span><br><span class="line">    string GamtString;</span><br><span class="line">    int proNum;</span><br><span class="line">    GanttChart()&#123;</span><br><span class="line">        GamtString += &quot;|&quot;;</span><br><span class="line">        proNum = 0;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    bool add(process *p)&#123;</span><br><span class="line">        //for(int i=0 ;i&lt;p-&gt;length;i++)&#123;</span><br><span class="line">            char temp[10];</span><br><span class="line">            itoa(p-&gt;pid,temp,10);</span><br><span class="line">            GamtString += temp;</span><br><span class="line">        //&#125;</span><br><span class="line">        GamtString += &quot;|&quot;;</span><br><span class="line">        proNum ++;</span><br><span class="line">        if(proNum!=0 &amp;&amp; proNum % 25 ==0)&#123;</span><br><span class="line">            GamtString =&quot;&quot;;//每隔25个清空一次甘特图</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void print()&#123;</span><br><span class="line">        cout&lt;&lt;&quot;                 该进程调度的甘特图：&quot;&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;&quot;____________________________________________________________________&quot;&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;GamtString&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;&quot;￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">//主函数与线程的共享变量</span><br><span class="line">int currPro;</span><br><span class="line">tool tool1;</span><br><span class="line">processQueue proqueue;</span><br><span class="line">process *pro ;</span><br><span class="line">process *proPrint;</span><br><span class="line">GanttChart gant;</span><br><span class="line">int timeInterval;</span><br><span class="line"></span><br><span class="line">class index&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    index()&#123;</span><br><span class="line">        currPro = 0;</span><br><span class="line"></span><br><span class="line">        timeInterval = tool1.timeInterval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void IndexGo()&#123;</span><br><span class="line">        int proCountForPrint = 0;</span><br><span class="line">        while(1)&#123;</span><br><span class="line">            while(mutex==1);</span><br><span class="line">            mutex=1;//加锁保护临界区</span><br><span class="line">            cout&lt;&lt;&quot;在主函数里面&quot;&lt;&lt;endl;</span><br><span class="line">            for(int i=0;i&lt;3;i++)&#123;</span><br><span class="line">                if(proqueue.List[0].size()&gt;0)&#123;</span><br><span class="line">                    proPrint=proqueue.selectFromList1AndDoIt();</span><br><span class="line">                    Sleep(proPrint-&gt;length * timeInterval);</span><br><span class="line">                    gant.add(proPrint);</span><br><span class="line">                    proCountForPrint++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            proqueue.ajustLevelQueues();</span><br><span class="line">            if(proCountForPrint!=0 &amp;&amp; proCountForPrint % 24==0)&#123;</span><br><span class="line">               gant.print();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mutex=0;//解锁</span><br><span class="line">            Sleep(1000);//便于观察</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD WINAPI ThreadProc(LPVOID lpParameter)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    while(1)&#123;</span><br><span class="line">        while(mutex==1);</span><br><span class="line">        mutex = 1;          //加锁保护临界区</span><br><span class="line">        cout&lt;&lt;&quot;在线程里面&quot;&lt;&lt;endl;</span><br><span class="line">        int RandomPronum = tool1.getRandom(1,5);</span><br><span class="line">        for(int i = 0;i &lt; RandomPronum;i++)&#123;//随机生成不同（1-5个）的进程</span><br><span class="line">            int Len = tool1.getRandom(1,50);</span><br><span class="line">            pro = new process(currPro,Len);</span><br><span class="line">            proqueue.processIncoming(pro);</span><br><span class="line">            currPro++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mutex = 0;//解锁</span><br><span class="line">        Sleep(1000);//便于观察</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;模拟进程调度---基于多级队列&quot;&lt;&lt;endl;</span><br><span class="line">    index inde;</span><br><span class="line">    HANDLE hThread1 = CreateThread(NULL, 0, ThreadProc, NULL, 0, NULL);</span><br><span class="line">    inde.IndexGo();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 进程调度 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>操作系统上机3</title>
      <link href="/2018/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%9C%BA3/"/>
      <url>/2018/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%9C%BA3/</url>
      <content type="html"><![CDATA[<p><strong>设有两个并发执行的父子进程，不断循环输出各自进程号、优先数和调度策 略。进程初始调度策略均为系统默认策略和默认优先级。当某个进程收到 SIGINT 信号时会自动将其优先数加 1，收到 SIGTSTP 信号时会自动将其优先数减 1。请编 程实现以上功能</strong></p><hr><a id="more"></a><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p><strong>1.信号：</strong><br>SIGINT：ctrl+C信号<br>SIGTST：ctrl+Z信号<br>固定的含义。</p><hr><p><strong>2.signal函数：</strong><br>sighandler_t signal(int signum, sighandler_t handler);<br>第一个参数signum：指明了所要处理的信号类型，它可以取除了SIGKILL和SIGSTOP外的任何一种信号。 　<br>第二个参数handler：描述了与信号关联的动作<br>eg： signal(SIGINT, (sighandler_t)sigcat);<br>接收到 ctrl+C信号 执行sigcat函数</p><p><strong>注意：</strong><br>一定要在超级权限sudo下执行.out 文件 否则优先数可能只能增加不能减少</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sched.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">#include &lt;sys/resource.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;wait.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">typedef void (*sighandler_t)(int);</span><br><span class="line">void sigcat()</span><br><span class="line">&#123;</span><br><span class="line">//+1</span><br><span class="line">    setpriority(PRIO_PROCESS, getpid(),getpriority(PRIO_PROCESS, getpid()) + 1);</span><br><span class="line">&#125;</span><br><span class="line">void sigzat()</span><br><span class="line">&#123;</span><br><span class="line">//-1</span><br><span class="line">    setpriority(PRIO_PROCESS, getpid(), getpriority(PRIO_PROCESS,getpid()) - 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int i,j,status;</span><br><span class="line">    int pid; //存放进程号</span><br><span class="line">    struct sched_param p[2]; //设置调度策略时使用的数据结构</span><br><span class="line">    for(i=0; i&lt;2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        //取进程优先数放在调度策略数据结构中</span><br><span class="line">        p[i].sched_priority = 10;</span><br><span class="line">    &#125;</span><br><span class="line">    pid = fork();</span><br><span class="line">    if(pid &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;failed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else if(pid &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        signal(SIGINT, (sighandler_t)sigcat);</span><br><span class="line">        sched_setscheduler(getpid(), SCHED_OTHER, &amp;p[0]);</span><br><span class="line">        setpriority(PRIO_PROCESS, getpid(), 10);</span><br><span class="line">        sleep(1);</span><br><span class="line">        for(i = 0; i &lt; 10; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;parent PID = %d, priority = %d, scheduler = %d\n&quot;, getpid(),getpriority(PRIO_PROCESS, 0), sched_getscheduler(getpid()));</span><br><span class="line">            printf(&quot;parent process hang on ，press Ctrl + C add 1 to priority \n&quot;);</span><br><span class="line">            pause();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        signal(SIGTSTP, (sighandler_t)sigzat);</span><br><span class="line">        //signal(SIGINT, (sighandler_t)donothing);</span><br><span class="line">        sched_setscheduler(getpid(), SCHED_OTHER, &amp;p[1]);</span><br><span class="line">        setpriority(PRIO_PROCESS, getpid(), 10);</span><br><span class="line">        sleep(1);</span><br><span class="line"></span><br><span class="line">        for(i=0; i&lt;10; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;Child PID = %d priority= %d scheduler = %d\n&quot;,getpid(),getpriority(PRIO_PROCESS,0), sched_getscheduler(getpid()));</span><br><span class="line">            printf(&quot;child prosecc hang on，press Ctrl + Z jie 1 to priority\n&quot;);</span><br><span class="line">            pause();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exit( EXIT_SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line">    return EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 优先数控制 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>操作系统上机1</title>
      <link href="/2018/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%9C%BA1/"/>
      <url>/2018/04/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%9C%BA1/</url>
      <content type="html"><![CDATA[<p>#一个多进程并发执行的程序。父进程首先创建一个执行ls命令的子进程然后再创建一个执行ps命令的子进程，并控制 ps 命令总在 ls 命令之前执行</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;sys/types.h&gt;</span><br><span class="line">#include&lt;wait.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;signal.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">typedef void(*sighandler_t)(int);</span><br><span class="line">void sigcat()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d Process continue\n&quot;,getpid());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main(int argc,char*argv[])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    int status_1,status_2;</span><br><span class="line">    signal(SIGINT,(sighandler_t)sigcat);//Registe a interrupt fuction</span><br><span class="line">    char *args1[]= &#123;&quot;/bin/ls&quot;,&quot;-a&quot;,NULL&#125;; //两个进程</span><br><span class="line">    char *args2[]= &#123;&quot;/bin/ps&quot;,&quot;-a&quot;,NULL&#125;;</span><br><span class="line">    int pid1=fork();</span><br><span class="line">    if(pid1&lt;0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;Create Process fail\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(pid1==0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;ls -the child process starting%d\n&quot;,getpid());</span><br><span class="line">        pause();//Wait for the interrupt</span><br><span class="line">        printf(&quot;ls the child process waking%d\n&quot;,getpid());</span><br><span class="line">        status_1=execve(args1[0],args1,NULL);</span><br><span class="line">        exit(0);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        //Father process</span><br><span class="line">        printf(&quot;\n Father Process starting%d\n &quot;,getpid());</span><br><span class="line">        int pid2=fork();</span><br><span class="line">        if(pid2&gt;0)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            printf(&quot;ls the childprocess pause%d\n&quot;,pid1);</span><br><span class="line">            waitpid(pid2,&amp;status_2,0);</span><br><span class="line">            printf(&quot;pid2 is over&quot;);</span><br><span class="line">            printf(&quot;ls waking%d\n&quot;,pid1);</span><br><span class="line">            kill(pid1,SIGINT);//运行p1</span><br><span class="line">            waitpid(pid1,&amp;status_1,0);</span><br><span class="line">            printf(&quot;ls over%d\n&quot;,pid1);</span><br><span class="line">            printf(&quot;Father process over%d\n&quot;,getpid());</span><br><span class="line">            exit(0);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        if(pid2&lt;0)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;Process 2fails\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(pid2==0)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;ps starting%d\n &quot;,getpid());</span><br><span class="line">            status_2=execve(args2[0],args2,NULL);</span><br><span class="line">            exit(0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 进程创建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux下连续三次fork() --深度理解进程创建函数</title>
      <link href="/2018/04/29/linux%E4%B8%8B%E8%BF%9E%E7%BB%AD%E4%B8%89%E6%AC%A1fork-%E6%B7%B1%E5%BA%A6%E7%90%86%E8%A7%A3%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0/"/>
      <url>/2018/04/29/linux%E4%B8%8B%E8%BF%9E%E7%BB%AD%E4%B8%89%E6%AC%A1fork-%E6%B7%B1%E5%BA%A6%E7%90%86%E8%A7%A3%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><strong>初识linux操作系统，fork作为系统调用理解起来却并不是很容易。</strong><br><strong>整理一下学习笔记，希望能对后来的初学者有所帮助。</strong></p><hr><a id="more"></a><p><strong>代码能说明问题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    pid_t pid;</span><br><span class="line">    int count = 0;</span><br><span class="line">    pid = fork();   //fork一个进程</span><br><span class="line">    if(pid == 0)</span><br><span class="line">    &#123;               //pid为0,</span><br><span class="line">        printf(&quot;this is child process, pid is %d\n&quot;,getpid());//getpid返回的是当前进程的PID</span><br><span class="line">        count+=2;</span><br><span class="line">        printf(&quot;count = %d\n&quot;,count);</span><br><span class="line">    &#125;</span><br><span class="line">    else if(pid &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;this is father process, pid is %d\n&quot;,getpid());</span><br><span class="line">        count++;</span><br><span class="line">        printf(&quot;count = %d\n&quot;,count);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        fprintf(stderr,&quot;ERROR:fork() failed!\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接下来问题就来了</strong><br><strong>fork的时候发生什么？</strong><br>①执行到这一句的时候，一个进程被创建了，这个进程与父进程一样，拥有一套与父进程相同的变量，相同的一套代码，这里可以粗浅的理解为子进程又复制了一份main函数。这里返回一个子进程的进程号，大于0。（第一次fork）</p><p><strong>②子进程怎么执行：</strong></p><p><strong>子进程从fork()的位置开始执行</strong>，也就是说前面的代码不走，但是拥有之前的变量以及变量的值，与父进程的值一样，这次fork()，返回值是0，所以在子进程里面直接执行了pid==0这一个分支，父进程里面并不执行这个分支的语句。这就为我们在写mian函数的时候怎么写子进程的程序提供了一个方法来隔离代码。</p><hr><p>明白了这个原理之后我们<strong>再来看一段代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    pid_t pid[3];</span><br><span class="line">    int count = 0;</span><br><span class="line">    pid[0] = fork();</span><br><span class="line">    pid[1] = fork();</span><br><span class="line">    pid[2] = fork();</span><br><span class="line"></span><br><span class="line">    printf(&quot;this is process\n&quot;);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://img-blog.csdn.net/20180426212504141?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0wxNTU4MTk4NzI3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>这里每一次输出表示一个进程的创建，可以看到一共有8个进程被创建，有兴趣的话可以验证一下<strong>连续四次fork可以出16个进程</strong>，但是不建议再多了，电脑会卡死，不要问我怎么知道的！<br>猜想是出2的n次方个进程。如果上面的第一段代码理解了的话，我们按照<strong>子进程从父进程fork的位置开始执行</strong>就会理解为什么会有八个进程。</p><hr><p>这里附上<strong>思维导图助于理解</strong><br><img src="https://img-blog.csdn.net/20180426213057679?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0wxNTU4MTk4NzI3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>那么我们想创建不是2的n次方个进程应该怎么做呢？这里还是以三个为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/unistd.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])  &#123;</span><br><span class="line">    int i,j,status;</span><br><span class="line">    int pid[3];</span><br><span class="line"></span><br><span class="line">    for(i=0; i&lt;3;i++)&#123;</span><br><span class="line">        if((pid[i]=fork()) &gt;0)&#123;</span><br><span class="line"></span><br><span class="line">            printf(&quot;This is child process pid=%d\n&quot;,pid[i]);</span><br><span class="line"></span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            printf(&quot;This is father process pid=%d\n&quot;,pid[i]);</span><br><span class="line">            exit( EXIT_SUCCESS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里给出一个参考，不是最准确的，<strong>可以与三次fork进行对比</strong>。</p><hr><p><strong>感谢阅读！</strong></p>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> fork </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>part 3000 is already inUse</title>
      <link href="/2018/04/29/Part3000IsAlreadyInUse/"/>
      <url>/2018/04/29/Part3000IsAlreadyInUse/</url>
      <content type="html"><![CDATA[<p>我们在使用webstorm的时候会经常遇到这样的情况，出现这种情况的原因：<br><strong>①当我们同时在一个端口运行一个项目，再同时在这个端口运行其他项目时</strong><br><strong>②同一个项目未停止直接关闭webstorm窗口，再次打开项目运行时</strong></p><a id="more"></a><p>这时有一个万能的办法，那就是<strong>重启电脑</strong>，哈哈！<strong>~~</strong></p><p>开玩笑了，当然，这个端口上的进程是可以停掉的。<br>打开cmd<br>键入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -o -n -a | findstr :3000</span><br></pre></td></tr></table></figure><p>3000为端口号，可以改为其他的。</p><p>之后可以看到3000端口的进程：<img src="http://img.blog.csdn.net/20180221151309633?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTDE1NTgxOTg3Mjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>之后键入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /F /PID 1776</span><br></pre></td></tr></table></figure><p>则可以停掉对应序号的进程。之后再运行工程就不会有这种情况了。</p>]]></content>
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在腾讯云上搭建个人静态博客</title>
      <link href="/2018/04/29/%E5%9C%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/04/29/%E5%9C%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>在腾讯云上部署自己的博客。<br>很有趣，特别是用域名访问自己部署的网页还是很有成就感的，所以决定写一遍文章来分享学习过程，<br>希望路过的朋友可以多提一些建议，交流心得。<br><a id="more"></a></p><p>一、我们需要知道的预备知识是：<br>①前端开发的基础知识：html，css，JavaScript.<br>这三个东西最为基础，但是却是前端开发的“三剑客”，很多的前端框架正是基于他们三个开发出来的。<br>这里推荐前端学习的网站：W3C,菜鸟教程，对于前端初学者开说比较友好，它们提供了很多可以测试的实例，在网页编写的过程中可以随时看到运行效果。<br>②服务器请求的相关知识：<br>服务器端的编程语言有很多。<br>可以使用java或者nodejs来搭建后台。</p><p>以tomcat服务器为例，将自己写好的页面用tomcat发布到本地，可以通过hocalhost：8080端口访问。<br>这一步很关键。关于tomcat服务器的安装及环境配置建议去慕课网学习。其中tomcat的运行需要java的环境。<br>以下提供两个参考的学习案例：</p><p>java环境配置<br><a href="http://www.imooc.com/video/1459" target="_blank" rel="noopener">http://www.imooc.com/video/1459</a><br>有全部的安装教程及环境变量配置方法<br>(jdk安装路径)JAVA_HOME :就是java文件夹下的jdk文件的位置 有时jdk文件夹后面可能有其它数字，因版本不同<br>(jdk命令文件的位置)Path：jdk下的bin文件夹，（win10以下的版本要编辑已有的path，在最前面加上路径，之后用“；”隔开与其它路径）<br>(jdk库文件的位置)CLASSPATH：jdk下的lib目录 注意在路径前加上.;</p><p>tomcat配置<br><a href="http://blog.csdn.net/zhouzezhou/article/details/52450810" target="_blank" rel="noopener">http://blog.csdn.net/zhouzezhou/article/details/52450810</a><br>在系统变量里新建变量名：CATALINA_BASE，变量值：D:\tomcat\apache-tomcat-9.0.0.M9<br>在系统变量里新建变量名：CATALINA_HOME，变量值：D:\tomcat\apache-tomcat-9.0.0.M9<br>在系统变量里打开PATH，添加变量值：%CATALINA_HOME%\lib;%CATALINA_HOME%\bin</p><hr><p>nodejs：<br>在另一篇文章“nodejs搭建个人博客系统”里面有详细介绍，这里不再赘述。</p><p>二、我们就可以将网页发布到腾讯云上了，一下步骤供参考：<br>①购买域名<br><img src="http://img.blog.csdn.net/20171208150222121?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTDE1NTgxOTg3Mjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="登录腾讯云首页注册账号"><br>②购买服务器<br><img src="http://img.blog.csdn.net/20171208150845561?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTDE1NTgxOTg3Mjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里是服务器的基本配置，可以选择操作系统，带宽等"><br><img src="http://img.blog.csdn.net/20171208151017167?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTDE1NTgxOTg3Mjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>对于个人博客系统其实不需要太高的配置，考虑到价格因素。<br>另外腾讯云有学生主机，只要认证后就有很大的优惠。<br>③域名解析</p><p>这里需要说明的一点就是域名是需要备案的，提交之后方可使用，不然就是Internet的“黑户”了，<br>过程略微有点烦，不过相信大家都是遵纪守法的好公民，可以很好完成这个任务，这里就不写过程了，按照上面的步骤来就行了。<br><img src="http://img.blog.csdn.net/20171208151510898?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTDE1NTgxOTg3Mjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里你的服务器与云主机关联起来"></p><p>将域名绑定到自己主机公网IP上，<br>绑定之后，大概十分钟，在你本地电脑的命令行执行<br>ping 你的域名  回车，<br>如果正常收到你的主机ip发来的数据，说明你的域名解析成功了。</p><p>三、配置云主机<br>        这里以windows为例。<br>        ①登录腾讯云官方网站，进入控制台，找到自己的主机，点击右侧的<img src="http://img.blog.csdn.net/20180221093538945?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTDE1NTgxOTg3Mjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述">更多，之后选择windows操作系统，然后启动服务器。<br>        ②在本地的电脑，win+R，输入mstsc回车，打开远程连接命令窗口，输入你的主机IP，以及密码进行连接，顺利的话之后就可以看到你的云服务器了，这个服务器由于是Windows的操作系统，所以看起来和自己本地的电脑没啥区别，这样就方便进行环境变量的配置了。<br>        ③之后就可以将自己写好的静态博客发布到tomcat上面了。<br>四、访问网页<br>        在本地电脑打开浏览器，输入：“你的域名：端口号”，这个端口号tomcat默认是8080，你也可以修改他的端口号，具体方法自行百度，如果修改为80端口时，访问网页的时候就不需要加端口号，只要域名就可以访问网页。<br>       以上是自己的学习过程的记录，欢迎点赞批评指正！</p>]]></content>
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
            <tag> 腾讯云 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图的邻接矩阵表示广度深度遍历</title>
      <link href="/2018/04/29/%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E8%A1%A8%E7%A4%BA%E5%B9%BF%E5%BA%A6%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86/"/>
      <url>/2018/04/29/%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E8%A1%A8%E7%A4%BA%E5%B9%BF%E5%BA%A6%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<p>图的邻接矩阵表示广度深度遍历大连理工大学数据结构上机</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;Queue.h&gt;</span><br><span class="line">//队列，可用之前文章里面的Queue.h</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;class EdgeType&gt;</span><br><span class="line">class Edge</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int start,end;//边的起始节点，终止节点</span><br><span class="line">    EdgeType weight;//边的权重（应该可以定义为int）</span><br><span class="line">    Edge()</span><br><span class="line">    &#123;</span><br><span class="line">       start=0;</span><br><span class="line">        end=0;</span><br><span class="line">        weight=0;</span><br><span class="line">    &#125;</span><br><span class="line">    Edge(int st,int en,int w)</span><br><span class="line">    &#123;</span><br><span class="line">        start=st;</span><br><span class="line">        end=en;</span><br><span class="line">        weight=w;</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator &gt; (Edge oneEdge)</span><br><span class="line">    &#123;</span><br><span class="line">        if(weight&gt;oneEdge.weight)</span><br><span class="line">            return true;</span><br><span class="line">        else</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator &lt; (Edge oneEdge)</span><br><span class="line">    &#123;</span><br><span class="line">        if(weight&lt;oneEdge.weight)</span><br><span class="line">            return true;</span><br><span class="line">        else</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;class EdgeType&gt;</span><br><span class="line">class Graph</span><br><span class="line">&#123;</span><br><span class="line">    public:</span><br><span class="line">    int vertexNum; //图中节点个数</span><br><span class="line">    int edgeNum;   //图中边的个数</span><br><span class="line">    int * Mark;    //标记某节点是否被访问</span><br><span class="line">    Graph(int verNum)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;vertexNum=verNum;</span><br><span class="line">        edgeNum=0;</span><br><span class="line">        Mark=new int[vertexNum];</span><br><span class="line">        for(int i=0;i&lt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Mark[i]=0; //都没有被访问过</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Graph()</span><br><span class="line">    &#123;</span><br><span class="line">        delete [] Mark;</span><br><span class="line">    &#125;</span><br><span class="line">    //virtual Edge&lt;EdgeType&gt; FirstEdge(int oneVertex)=0;</span><br><span class="line">    //virtual Edge&lt;EdgeType&gt; NextEdge(Edge&lt;EdgeType&gt; oneEdge)=0;</span><br><span class="line">    int verticesNum()</span><br><span class="line">    &#123;</span><br><span class="line">        return vertexNum;</span><br><span class="line">    &#125;</span><br><span class="line">    int EdgesNum()</span><br><span class="line">    &#123;</span><br><span class="line">        return edgeNum;</span><br><span class="line">    &#125;</span><br><span class="line">    bool isEdge(Edge&lt;EdgeType&gt; oneEdge)</span><br><span class="line">    &#123;</span><br><span class="line">        if(oneEdge.end&gt;=0 &amp;&amp; oneEdge.start&gt;=0 &amp;&amp; oneEdge.weight&gt;0)//判断条件还不清楚</span><br><span class="line">        &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">          return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int startOfVertex(Edge&lt;EdgeType&gt; oneEdge)</span><br><span class="line">    &#123;</span><br><span class="line">        return oneEdge.start;</span><br><span class="line">    &#125;</span><br><span class="line">    int endOfVertex(Edge&lt;EdgeType&gt; oneEdge)</span><br><span class="line">    &#123;</span><br><span class="line">        return oneEdge.end;</span><br><span class="line">    &#125;</span><br><span class="line">    EdgeType weight(Edge&lt;EdgeType&gt; oneEdge) //返回oneEdge的权重</span><br><span class="line">    &#123;</span><br><span class="line">        return oneEdge.weight;</span><br><span class="line">    &#125;</span><br><span class="line">    //virtual void setEdge(int start,int end,int weight)=0;</span><br><span class="line">    //virtual void deleteEdge(int start,int end)=0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;class EdgeType&gt;</span><br><span class="line">class AdjGraph : public Graph&lt;EdgeType &gt;</span><br><span class="line">&#123;</span><br><span class="line"> private:</span><br><span class="line">    int ** matrix;</span><br><span class="line"> public:</span><br><span class="line">    AdjGraph(int verNum):Graph&lt;EdgeType&gt;(verNum)</span><br><span class="line">    &#123;</span><br><span class="line">        matrix =new int * [verNum];</span><br><span class="line">        for(int i=0;i&lt;verNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[i]=new int [verNum];</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=0;i&lt;verNum;i++)</span><br><span class="line">          for(int j=0;j&lt;verNum;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[i][j]=0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AdjGraph(int verNum,int **  a):Graph&lt;EdgeType&gt;(verNum)</span><br><span class="line">    &#123;</span><br><span class="line">        matrix =new int * [verNum];</span><br><span class="line">        for(int i=0;i&lt;verNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[i]=new int [verNum];</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=0;i&lt;verNum;i++)</span><br><span class="line">          for(int j=0;j&lt;verNum;j++)</span><br><span class="line">          &#123;</span><br><span class="line"></span><br><span class="line">            matrix[i][j]=a[i][j];</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void disp()</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">           for(int j=0;j&lt;this-&gt;vertexNum;j++)</span><br><span class="line">           &#123;</span><br><span class="line">             cout&lt;&lt;matrix[i][j]&lt;&lt;&quot; &quot;;</span><br><span class="line">           &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~AdjGraph()</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[i]=new int [this-&gt;vertexNum];</span><br><span class="line">        &#125;</span><br><span class="line">        delete [] matrix;</span><br><span class="line">    &#125;</span><br><span class="line">    Edge&lt;EdgeType&gt; FirstEdge(int oneVer) //返回顶点的第一条边</span><br><span class="line">    &#123;</span><br><span class="line">        Edge&lt;EdgeType&gt; tem;</span><br><span class="line">        tem.start=oneVer;</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(matrix[oneVer][i]!=0)</span><br><span class="line">            &#123;</span><br><span class="line">                tem.end=i;</span><br><span class="line">                tem.weight=matrix[oneVer][i];</span><br><span class="line">                return tem;</span><br><span class="line">                //break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //cout&lt;&lt;&quot;没有符合条件的边&quot;&lt;&lt;endl;</span><br><span class="line">        //return;</span><br><span class="line">    &#125;</span><br><span class="line">    Edge&lt;EdgeType&gt; NextEdge(Edge&lt;EdgeType&gt; oneEdge)//返回与oneEdg有相同起点的下一条边</span><br><span class="line">    &#123;</span><br><span class="line">        Edge&lt;EdgeType&gt; tem;</span><br><span class="line">        tem.start=oneEdge.start;</span><br><span class="line">        for(int i=oneEdge.end+1;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">              if(matrix[oneEdge.start][i]!=0)</span><br><span class="line">              &#123;</span><br><span class="line">                 tem.end=i;</span><br><span class="line">                 tem.weight=matrix[oneEdge.start][i];</span><br><span class="line">                 return tem;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //cout&lt;&lt;&quot;没有符合条件的边&quot;&lt;&lt;endl;</span><br><span class="line">        //return;</span><br><span class="line">    &#125;</span><br><span class="line">    void visit(int i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;正在访问&quot;&lt;&lt;i+1&lt;&lt;&quot;号节点&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //深度优先搜索</span><br><span class="line">    void DFS(int i)//从i号节点开始深度优先搜索</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;Mark[i]=1;</span><br><span class="line">        visit(i);</span><br><span class="line">        for(Edge&lt;EdgeType&gt; e=FirstEdge(i);this-&gt;isEdge(e);e=NextEdge(e))</span><br><span class="line">        &#123;</span><br><span class="line">             if(this-&gt;Mark[e.end]==0)</span><br><span class="line">             &#123;</span><br><span class="line">               DFS(e.end);</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    void DFSGraph()//对图进行深度优先搜索</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        this-&gt;Mark[i]=0;  //标记都未访问</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(this-&gt;Mark[i]==0)</span><br><span class="line">            &#123;</span><br><span class="line">                DFS(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //广度优先搜索</span><br><span class="line">    void BFS(int i)//从i号节点开始广度优先搜索</span><br><span class="line">    &#123;</span><br><span class="line">        Queue&lt;int&gt; que;</span><br><span class="line">        que.EnQueue(i);</span><br><span class="line">        visit(i);</span><br><span class="line">        this-&gt;Mark[i]=1;</span><br><span class="line">        int p;</span><br><span class="line">        while(!que.IsEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            que.DeQueue(p);</span><br><span class="line">            this-&gt;Mark[p]=1;</span><br><span class="line">            for(Edge&lt;EdgeType&gt; e=FirstEdge(p);this-&gt;isEdge(e);e=NextEdge(e))</span><br><span class="line">            &#123;</span><br><span class="line">                if(this-&gt;Mark[e.end]==0)</span><br><span class="line">                &#123;//此处要注意，在节点入队时候就要将Mark置为已访问，否则可能会导致同一节点多次入队</span><br><span class="line">                  visit(e.end);</span><br><span class="line">                  this-&gt;Mark[e.end]=1;</span><br><span class="line">                  que.EnQueue(e.end);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void BFSGraph()//对图进行广度优先搜索</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        this-&gt;Mark[i]=0;  //标记都未访问</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(this-&gt;Mark[i]==0)</span><br><span class="line">            &#123;</span><br><span class="line">                BFS(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //课本p160页的图</span><br><span class="line">    int tem[8][8]=&#123;</span><br><span class="line">        &#123;0,1,1,0,0,0,0,0&#125;,</span><br><span class="line">        &#123;1,0,0,1,1,0,0,0&#125;,</span><br><span class="line">        &#123;1,0,0,0,0,1,1,0&#125;,</span><br><span class="line">        &#123;0,1,0,0,0,0,0,1&#125;,</span><br><span class="line">        &#123;0,1,0,0,0,0,0,1&#125;,</span><br><span class="line">        &#123;0,0,1,0,0,0,1,0&#125;,</span><br><span class="line">        &#123;0,0,1,0,0,1,0,0&#125;,</span><br><span class="line">        &#123;0,0,0,1,1,0,0,0&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    int ** a=new int *[8];</span><br><span class="line">    for(int i=0;i&lt;8;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=new int [8];</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;8;i++)</span><br><span class="line">      for(int j=0;j&lt;8;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i][j]=tem[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AdjGraph&lt;int&gt; p(8,a);</span><br><span class="line">    p.disp();</span><br><span class="line">   // p.DFSGraph();</span><br><span class="line">    p.BFSGraph();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171210214341700?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTDE1NTgxOTg3Mjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="main函数里构造的图"></p>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/04/27/hello-world/"/>
      <url>/2018/04/27/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
