<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>在腾讯云上搭建个人静态博客</title>
      <link href="/2018/04/28/%E5%9C%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2-1/"/>
      <url>/2018/04/28/%E5%9C%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2-1/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>myfirst</title>
      <link href="/2018/04/27/myfirst/"/>
      <url>/2018/04/27/myfirst/</url>
      <content type="html"><![CDATA[<p>图的邻接矩阵表示广度深度遍历大连理工大学数据结构上机<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;Queue.h&gt;</span><br><span class="line">//队列，可用之前文章里面的Queue.h</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;class EdgeType&gt;</span><br><span class="line">class Edge</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int start,end;//边的起始节点，终止节点</span><br><span class="line">    EdgeType weight;//边的权重（应该可以定义为int）</span><br><span class="line">    Edge()</span><br><span class="line">    &#123;</span><br><span class="line">       start=0;</span><br><span class="line">        end=0;</span><br><span class="line">        weight=0;</span><br><span class="line">    &#125;</span><br><span class="line">    Edge(int st,int en,int w)</span><br><span class="line">    &#123;</span><br><span class="line">        start=st;</span><br><span class="line">        end=en;</span><br><span class="line">        weight=w;</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator &gt; (Edge oneEdge)</span><br><span class="line">    &#123;</span><br><span class="line">        if(weight&gt;oneEdge.weight)</span><br><span class="line">            return true;</span><br><span class="line">        else</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">    bool operator &lt; (Edge oneEdge)</span><br><span class="line">    &#123;</span><br><span class="line">        if(weight&lt;oneEdge.weight)</span><br><span class="line">            return true;</span><br><span class="line">        else</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;class EdgeType&gt;</span><br><span class="line">class Graph</span><br><span class="line">&#123;</span><br><span class="line">    public:</span><br><span class="line">    int vertexNum; //图中节点个数</span><br><span class="line">    int edgeNum;   //图中边的个数</span><br><span class="line">    int * Mark;    //标记某节点是否被访问</span><br><span class="line">    Graph(int verNum)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;vertexNum=verNum;</span><br><span class="line">        edgeNum=0;</span><br><span class="line">        Mark=new int[vertexNum];</span><br><span class="line">        for(int i=0;i&lt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Mark[i]=0; //都没有被访问过</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Graph()</span><br><span class="line">    &#123;</span><br><span class="line">        delete [] Mark;</span><br><span class="line">    &#125;</span><br><span class="line">    //virtual Edge&lt;EdgeType&gt; FirstEdge(int oneVertex)=0;</span><br><span class="line">    //virtual Edge&lt;EdgeType&gt; NextEdge(Edge&lt;EdgeType&gt; oneEdge)=0;</span><br><span class="line">    int verticesNum()</span><br><span class="line">    &#123;</span><br><span class="line">        return vertexNum;</span><br><span class="line">    &#125;</span><br><span class="line">    int EdgesNum()</span><br><span class="line">    &#123;</span><br><span class="line">        return edgeNum;</span><br><span class="line">    &#125;</span><br><span class="line">    bool isEdge(Edge&lt;EdgeType&gt; oneEdge)</span><br><span class="line">    &#123;</span><br><span class="line">        if(oneEdge.end&gt;=0 &amp;&amp; oneEdge.start&gt;=0 &amp;&amp; oneEdge.weight&gt;0)//判断条件还不清楚</span><br><span class="line">        &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">          return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int startOfVertex(Edge&lt;EdgeType&gt; oneEdge)</span><br><span class="line">    &#123;</span><br><span class="line">        return oneEdge.start;</span><br><span class="line">    &#125;</span><br><span class="line">    int endOfVertex(Edge&lt;EdgeType&gt; oneEdge)</span><br><span class="line">    &#123;</span><br><span class="line">        return oneEdge.end;</span><br><span class="line">    &#125;</span><br><span class="line">    EdgeType weight(Edge&lt;EdgeType&gt; oneEdge) //返回oneEdge的权重</span><br><span class="line">    &#123;</span><br><span class="line">        return oneEdge.weight;</span><br><span class="line">    &#125;</span><br><span class="line">    //virtual void setEdge(int start,int end,int weight)=0;</span><br><span class="line">    //virtual void deleteEdge(int start,int end)=0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;class EdgeType&gt;</span><br><span class="line">class AdjGraph : public Graph&lt;EdgeType &gt;</span><br><span class="line">&#123;</span><br><span class="line"> private:</span><br><span class="line">    int ** matrix;</span><br><span class="line"> public:</span><br><span class="line">    AdjGraph(int verNum):Graph&lt;EdgeType&gt;(verNum)</span><br><span class="line">    &#123;</span><br><span class="line">        matrix =new int * [verNum];</span><br><span class="line">        for(int i=0;i&lt;verNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[i]=new int [verNum];</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=0;i&lt;verNum;i++)</span><br><span class="line">          for(int j=0;j&lt;verNum;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[i][j]=0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AdjGraph(int verNum,int **  a):Graph&lt;EdgeType&gt;(verNum)</span><br><span class="line">    &#123;</span><br><span class="line">        matrix =new int * [verNum];</span><br><span class="line">        for(int i=0;i&lt;verNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[i]=new int [verNum];</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=0;i&lt;verNum;i++)</span><br><span class="line">          for(int j=0;j&lt;verNum;j++)</span><br><span class="line">          &#123;</span><br><span class="line"></span><br><span class="line">            matrix[i][j]=a[i][j];</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void disp()</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">           for(int j=0;j&lt;this-&gt;vertexNum;j++)</span><br><span class="line">           &#123;</span><br><span class="line">             cout&lt;&lt;matrix[i][j]&lt;&lt;&quot; &quot;;</span><br><span class="line">           &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~AdjGraph()</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[i]=new int [this-&gt;vertexNum];</span><br><span class="line">        &#125;</span><br><span class="line">        delete [] matrix;</span><br><span class="line">    &#125;</span><br><span class="line">    Edge&lt;EdgeType&gt; FirstEdge(int oneVer) //返回顶点的第一条边</span><br><span class="line">    &#123;</span><br><span class="line">        Edge&lt;EdgeType&gt; tem;</span><br><span class="line">        tem.start=oneVer;</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(matrix[oneVer][i]!=0)</span><br><span class="line">            &#123;</span><br><span class="line">                tem.end=i;</span><br><span class="line">                tem.weight=matrix[oneVer][i];</span><br><span class="line">                return tem;</span><br><span class="line">                //break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //cout&lt;&lt;&quot;没有符合条件的边&quot;&lt;&lt;endl;</span><br><span class="line">        //return;</span><br><span class="line">    &#125;</span><br><span class="line">    Edge&lt;EdgeType&gt; NextEdge(Edge&lt;EdgeType&gt; oneEdge)//返回与oneEdg有相同起点的下一条边</span><br><span class="line">    &#123;</span><br><span class="line">        Edge&lt;EdgeType&gt; tem;</span><br><span class="line">        tem.start=oneEdge.start;</span><br><span class="line">        for(int i=oneEdge.end+1;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">              if(matrix[oneEdge.start][i]!=0)</span><br><span class="line">              &#123;</span><br><span class="line">                 tem.end=i;</span><br><span class="line">                 tem.weight=matrix[oneEdge.start][i];</span><br><span class="line">                 return tem;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //cout&lt;&lt;&quot;没有符合条件的边&quot;&lt;&lt;endl;</span><br><span class="line">        //return;</span><br><span class="line">    &#125;</span><br><span class="line">    void visit(int i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;正在访问&quot;&lt;&lt;i+1&lt;&lt;&quot;号节点&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //深度优先搜索</span><br><span class="line">    void DFS(int i)//从i号节点开始深度优先搜索</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;Mark[i]=1;</span><br><span class="line">        visit(i);</span><br><span class="line">        for(Edge&lt;EdgeType&gt; e=FirstEdge(i);this-&gt;isEdge(e);e=NextEdge(e))</span><br><span class="line">        &#123;</span><br><span class="line">             if(this-&gt;Mark[e.end]==0)</span><br><span class="line">             &#123;</span><br><span class="line">               DFS(e.end);</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    void DFSGraph()//对图进行深度优先搜索</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        this-&gt;Mark[i]=0;  //标记都未访问</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(this-&gt;Mark[i]==0)</span><br><span class="line">            &#123;</span><br><span class="line">                DFS(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //广度优先搜索</span><br><span class="line">    void BFS(int i)//从i号节点开始广度优先搜索</span><br><span class="line">    &#123;</span><br><span class="line">        Queue&lt;int&gt; que;</span><br><span class="line">        que.EnQueue(i);</span><br><span class="line">        visit(i);</span><br><span class="line">        this-&gt;Mark[i]=1;</span><br><span class="line">        int p;</span><br><span class="line">        while(!que.IsEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            que.DeQueue(p);</span><br><span class="line">            this-&gt;Mark[p]=1;</span><br><span class="line">            for(Edge&lt;EdgeType&gt; e=FirstEdge(p);this-&gt;isEdge(e);e=NextEdge(e))</span><br><span class="line">            &#123;</span><br><span class="line">                if(this-&gt;Mark[e.end]==0)</span><br><span class="line">                &#123;//此处要注意，在节点入队时候就要将Mark置为已访问，否则可能会导致同一节点多次入队</span><br><span class="line">                  visit(e.end);</span><br><span class="line">                  this-&gt;Mark[e.end]=1;</span><br><span class="line">                  que.EnQueue(e.end);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void BFSGraph()//对图进行广度优先搜索</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        this-&gt;Mark[i]=0;  //标记都未访问</span><br><span class="line">        for(int i=0;i&lt;this-&gt;vertexNum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(this-&gt;Mark[i]==0)</span><br><span class="line">            &#123;</span><br><span class="line">                BFS(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //课本p160页的图</span><br><span class="line">    int tem[8][8]=&#123;</span><br><span class="line">        &#123;0,1,1,0,0,0,0,0&#125;,</span><br><span class="line">        &#123;1,0,0,1,1,0,0,0&#125;,</span><br><span class="line">        &#123;1,0,0,0,0,1,1,0&#125;,</span><br><span class="line">        &#123;0,1,0,0,0,0,0,1&#125;,</span><br><span class="line">        &#123;0,1,0,0,0,0,0,1&#125;,</span><br><span class="line">        &#123;0,0,1,0,0,0,1,0&#125;,</span><br><span class="line">        &#123;0,0,1,0,0,1,0,0&#125;,</span><br><span class="line">        &#123;0,0,0,1,1,0,0,0&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    int ** a=new int *[8];</span><br><span class="line">    for(int i=0;i&lt;8;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=new int [8];</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;8;i++)</span><br><span class="line">      for(int j=0;j&lt;8;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i][j]=tem[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AdjGraph&lt;int&gt; p(8,a);</span><br><span class="line">    p.disp();</span><br><span class="line">   // p.DFSGraph();</span><br><span class="line">    p.BFSGraph();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171210214341700?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTDE1NTgxOTg3Mjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="main函数里构造的图"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/04/27/hello-world/"/>
      <url>/2018/04/27/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
